#!/bin/bash

function abort {
  echo "${@}" 1>&2
  exit 1
}

function check-su {
  [ "${EUID}" -eq 0 ] ||
    abort "Must run as root, please retry with sudo geo-ip-block"
}

function apply {
  check-su
  firewall-cmd --reload > /dev/null ||
    abort "Failed reloading firewall"
  echo "✅ Firewall updated successfully"
}

function sort-zone {
  sort -gt '.' db/zone${1}.tmp -o zone${1}
  local count=$(cat zone${1} | wc -l)
  echo -e "Loaded ${count} zones for IPv${1}"
}

function up-to-date {
  if [ -f "${1}" ]
  then
    local now=$(date +%s)
    local age=$(stat -c %Y ${1})
    age=$((${now} - ${age}))

    if [ ${age} -lt 82800 ]
    then
      echo "✅ Up to date ${1}"
      return 0
    fi
  fi

  rm -f "${1}"
  return 1
}

function download-maxmind {
  mkdir -p db

  local key="$(cat geo-ip-block.key)"
  local url="https://download.maxmind.com/geoip/databases/GeoLite2-Country-CSV/download?suffix=zip"
  local out="db/GeoLite2-Country-CSV.zip"

  if up-to-date ${out}
  then
    return
  fi

  curl -fs -JLA geo-ip-block -u "${key}" -o "${out}" "${url}" ||
    abort "Failed downloading ${out}"
  echo "✅ Downloaded ${out}"

  unzip -qojd db "${out}"
  echo "✅ Extracted ${out}"
}

function download-ipdeny {
  mkdir -p db

  local url="${2}"
  local out="${1}"

  if up-to-date ${out}
  then
    return
  fi

  curl -fs -JLA geo-ip-block -o "${out}" "${url}" ||
    echo -n '' > "${out}"
  echo "✅ Downloaded ${out}"
}

function update-maxmind {

  [ ! -z "${1}" ] ||
    abort "Missing country codes"

  download-maxmind

  local codes=$(echo "$@" | sed "s/ /|/g")
  sed \
    -nE "s/([0-9]+),.*,(${codes}),.*/\1/Ip" \
    "db/GeoLite2-Country-Locations-en.csv" \
    > "db/geoname_id"

  local geoids="$(cat db/geoname_id)"
  geoids=$(echo ${geoids} | sed "s/ /|/g")

  sed \
    -nE "s/^([0-9:\.\/]+),[0-9]+,(${geoids}),.*/\1/Ip" \
    "db/GeoLite2-Country-Blocks-IPv4.csv" \
    > "db/zone4.tmp"
  sort-zone 4

  sed \
    -nE "s/^([0-9:\.\/]+),[0-9]+,(${geoids}),.*/\1/Ip" \
    "db/GeoLite2-Country-Blocks-IPv6.csv" \
    > "db/zone6.tmp"
  sort-zone 6
}

function update-ipdeny {

  [ ! -z "${1}" ] ||
    abort "Missing country codes"

  mkdir -p db
  echo -n '' > db/zone4.tmp
  echo -n '' > db/zone6.tmp

  for z in "${@}"
  do
    download-ipdeny db/$z-ip4.zone "https://www.ipdeny.com/ipblocks/data/aggregated/$z-aggregated.zone"
    download-ipdeny db/$z-ip6.zone "https://www.ipdeny.com/ipv6/ipaddresses/aggregated/$z-aggregated.zone"

    cat db/$z-ip4.zone >> db/zone4.tmp
    cat db/$z-ip6.zone >> db/zone6.tmp
  done

  sort-zone 4
  sort-zone 6
}

function update {
  if [ -f "geo-ip-block.key" ]
  then
    update-maxmind "${@}"
  else
    update-ipdeny "${@}"
  fi
}

function exists-ipset {
  firewall-cmd --permanent --info-ipset="geo-ip-block-list-ip${1}" &> /dev/null
}

function delete-ipsets {
  check-su
  if ! exists-ipset "${1}"
  then
    return
  fi

  firewall-cmd \
    --permanent \
    --zone=drop \
    --remove-source=ipset:"geo-ip-block-list-ip${1}" > /dev/null ||
    abort "Failed removing source ${1}"

  apply

  firewall-cmd \
    --permanent \
    --delete-ipset="geo-ip-block-list-ip${1}" > /dev/null ||
    abort "Failed deleting ipset ${1}"

  echo "✅ Deleted geo-ip-block-list-ip${1}"
}

function delete {
  check-su
  delete-ipsets 4
  delete-ipsets 6
}

function create {
  check-su
  if ! exists-ipset 4
  then
    firewall-cmd \
      --permanent \
      --new-ipset="geo-ip-block-list-ip4" \
      --type=hash:net \
      --option=family=inet \
      --option=hashsize=4096 \
      --option=maxelem=1000000 \
      --zone=drop > /dev/null ||
      abort "Failed creating ip4 block list"
    echo "✅ Created geo-ip-block-list-ip4"
  fi

  if ! exists-ipset 6
  then
    firewall-cmd \
      --permanent \
      --new-ipset="geo-ip-block-list-ip6" \
      --type=hash:net \
      --option=family=inet6 \
      --option=hashsize=4096 \
      --option=maxelem=1000000 \
      --zone=drop > /dev/null ||
      abort "Failed creating ip6 block list"
    echo "✅ Created geo-ip-block-list-ip6"
  fi
}

function load-net {
  check-su
  firewall-cmd \
    --permanent \
    --ipset="geo-ip-block-list-ip${1}" \
    --add-entries-from-file="zone${1}" > /dev/null ||
    abort "Failed loading ${f}"

  echo "✅ Loaded ${f}"

  firewall-cmd \
    --permanent \
    --zone=drop \
    --add-source="ipset:geo-ip-block-list-ip${1}" > /dev/null ||
    abort "Failed adding source for ${1}"

  echo "✅ Added source geo-ip-block-list-ip${1}"
}

function load {
  load-net 4
  load-net 6
}

function banner {
  echo -e '\033[0;94m'
  cat << EOF
   █████████                  ████████████████
  ███░░░░░███                ░░███░░███░░░░░███
 ███     ░░░   ██████  ██████ ░███ ░███    ░███
░███          ███░░██████░░███░███ ░██████████
░███    █████░███████░███ ░███░███ ░███░░░░░░
░░███  ░░███ ░███░░░ ░███ ░███░███ ░███
 ░░█████████ ░░██████░░██████ ██████████
  ░░░░░░░░░   ░░░░░░  ░░░░░░ ░░░░░░░░░░
EOF
  echo -e '\033[0m'
}

function full {
  update "${@}"
  delete
  create
  load
  apply
}

{

COMMAND="${1}"
shift

# Save all output to log file
log="${0}-$(date -I).log"
exec > >(tee "${log}") 2>&1

banner
echo -e "Time: $(date -Isec)"
echo -e "Args: ${COMMAND} ${@}"

pushd $(dirname ${0}) &> /dev/null

${COMMAND} "${@}"

}