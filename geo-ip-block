#!/bin/bash

filename=geo-ip-block-list-ip

function abort {
  echo -e "${@}\n\n" 1>&2
  cat db/last-cmd.log 1>&2
  exit 1
}

function check-su {
  [ "${EUID}" -eq 0 ] ||
    abort "Must run as root, please retry with sudo geo-ip-block"
}

function fwc {
  check-su
  firewall-cmd "${@}" &> db/last-cmd.log ||
    abort "Command failed:\n\nfirewall-cmd ${@}"
}

function apply {
  fwc --reload
}

function sort-zone {
  sort -gt '.' db/zone${1}.tmp -o zone${1}
  local count=$(cat zone${1} | wc -l)
  echo -e "⏳ Loaded ${count} zones for IPv${1}"
}

function up-to-date {
  if [ -f "${1}" ]
  then
    local now=$(date +%s)
    local age=$(stat -c %Y ${1})
    age=$((${now} - ${age}))

    if [ ${age} -lt 82800 ]
    then
      echo "✅ Up to date ${1}"
      return 0
    fi
  fi

  rm -f "${1}"
  return 1
}

function download-maxmind {
  mkdir -p db

  local key="$(cat geo-ip-block.key)"
  local url="https://download.maxmind.com/geoip/databases/GeoLite2-Country-CSV/download?suffix=zip"
  local out="db/GeoLite2-Country-CSV.zip"

  if up-to-date ${out}
  then
    return
  fi

  curl -fs -JLA geo-ip-block -u "${key}" -o "${out}" "${url}" ||
    abort "Failed downloading ${out}"
  echo "✅ Downloaded ${out}"

  unzip -qojd db "${out}"
  echo "✅ Extracted ${out}"
}

function download-ipdeny {
  mkdir -p db

  local url="${2}"
  local out="${1}"

  if up-to-date ${out}
  then
    return
  fi

  curl -fs -JLA geo-ip-block -o "${out}" "${url}" ||
    echo -n '' > "${out}"
  echo "✅ Downloaded ${out}"
}

function update-maxmind {

  [ ! -z "${1}" ] ||
    abort "Missing country codes"

  download-maxmind

  local codes=$(echo "$@" | sed "s/ /|/g")
  sed \
    -nE "s/([0-9]+),.*,(${codes}),.*/\1/Ip" \
    "db/GeoLite2-Country-Locations-en.csv" \
    > "db/geoname_id"

  local geoids="$(cat db/geoname_id)"
  geoids=$(echo ${geoids} | sed "s/ /|/g")

  sed \
    -nE "s/^([0-9:\.\/]+),.*(${geoids}),.*/\1/Ip" \
    "db/GeoLite2-Country-Blocks-IPv4.csv" \
    > "db/zone4.tmp"
  sort-zone 4

  sed \
    -nE "s/^([0-9:\.\/]+),.*(${geoids}),.*/\1/Ip" \
    "db/GeoLite2-Country-Blocks-IPv6.csv" \
    > "db/zone6.tmp"
  sort-zone 6
}

function update-ipdeny {

  [ ! -z "${1}" ] ||
    abort "Missing country codes"

  mkdir -p db
  echo -n '' > db/zone4.tmp
  echo -n '' > db/zone6.tmp

  for z in "${@}"
  do
    download-ipdeny db/$z-ip4.zone "https://www.ipdeny.com/ipblocks/data/aggregated/$z-aggregated.zone"
    download-ipdeny db/$z-ip6.zone "https://www.ipdeny.com/ipv6/ipaddresses/aggregated/$z-aggregated.zone"

    cat db/$z-ip4.zone >> db/zone4.tmp
    cat db/$z-ip6.zone >> db/zone6.tmp
  done

  sort-zone 4
  sort-zone 6
}

function update {
  if [ -z "${1}" ]
  then
    return
  fi

  if [ -f "geo-ip-block.key" ]
  then
    update-maxmind "${@}"
  else
    update-ipdeny "${@}"
  fi
}

function exists-ipset {
  [ -f "/etc/firewalld/ipsets/${filename}${1}.xml" ]
}

# make-rule <4|6>
function make-rule {
  firewall-cmd \
    --permanent \
    --direct \
    --get-all-rules > db/all-rules.txt

  if [ -z "${1}" ]; then return; fi
  echo -ne "ipv${1} filter OUTPUT 0 -m set --match-set ${filename}${1} dst -j DROP"
}

# remove-rule <4|6>
function remove-rule {
  local rule=$(make-rule ${1})
  if [ -z "${rule}" ]; then return; fi
  if ! grep -q "${rule}" db/all-rules.txt; then return; fi

  fwc \
    --permanent \
    --direct \
    --remove-rule \
      ${rule}
  echo "✅ Removed rule ${1}"
}

# add-rule <4|6>
function add-rule {
  local rule=$(make-rule ${1})
  if [ -z "${rule}" ]; then return; fi
  if grep -q "${rule}" db/all-rules.txt; then return; fi

  fwc \
    --permanent \
    --direct \
    --add-rule \
      ${rule}
  echo "✅ Added rule ${1}"
}

# delete-ipset <4|6>
function delete-ipset {
  if ! exists-ipset "${1}"; then return; fi

  remove-rule ${1}

  fwc \
    --permanent \
    --zone=drop \
    --remove-source=ipset:"${filename}${1}"
  apply

  fwc \
    --permanent \
    --delete-ipset="${filename}${1}"
  apply
  echo "✅ Deleted ${1}"
}

function delete {
  delete-ipset 4
  delete-ipset 6
}

# new-ipset <4|6> <inet|inet6>
function new-ipset {
  if exists-ipset "${1}"; then return; fi

  fwc \
    --permanent \
    --new-ipset="${filename}${1}" \
    --type=hash:net \
    --option=family=${2} \
    --option=hashsize=4096 \
    --option=maxelem=1000000 \
    --zone=drop
  echo "✅ Created ipset ${1}"
}

# add-source <4|6>
function add-source {
  fwc \
    --permanent \
    --zone=drop \
    --add-source="ipset:${filename}${1}"
  echo "✅ Added source ${1}"
}

function create {
  new-ipset 4 inet
  new-ipset 6 inet6

  add-source 4
  add-source 6

  add-rule 4
  add-rule 6
}

# add-entries <4|6>
function load-net {
  fwc \
    --permanent \
    --ipset="${filename}${1}" \
    --add-entries-from-file="zone${1}"
  echo "✅ Added entries into ${1}"
}

function load {
  load-net 4
  load-net 6
}

function banner {
  echo -e '\033[0;94m'
  cat << EOF
   █████████                  ████████████████
  ███░░░░░███                ░░███░░███░░░░░███
 ███     ░░░   ██████  ██████ ░███ ░███    ░███
░███          ███░░██████░░███░███ ░██████████
░███    █████░███████░███ ░███░███ ░███░░░░░░
░░███  ░░███ ░███░░░ ░███ ░███░███ ░███
 ░░█████████ ░░██████░░██████ ██████████
  ░░░░░░░░░   ░░░░░░  ░░░░░░ ░░░░░░░░░░
EOF
  echo -e '\033[0m'
}

function full {
  update "${@}"
  delete
  create
  load
  apply
}

{

COMMAND="${1}"
shift

# Save all output to log file
log="${0}-$(date -I).log"
exec > >(tee "${log}") 2>&1

banner
echo -e "Time: $(date -Isec)"
echo -e "Args: ${COMMAND} ${@}"

pushd $(dirname ${0}) &> /dev/null

${COMMAND} "${@}"

}